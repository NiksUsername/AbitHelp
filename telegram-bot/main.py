import telebot
import psycopg2
import requests
import os
import requests
from io import BytesIO
from telebot import types
import select
import threading
import uuid
from telebot.types import InlineQueryResultArticle, InputTextMessageContent, InputFile
from dotenv import load_dotenv
import os

load_dotenv()



token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(token)

def get_conn():
    return psycopg2.connect(
        host=os.getenv("HOST"),
        dbname=os.getenv("DB_NAME"),
        user=os.getenv("DB_USER"),
        port=os.getenv("PORT"),
        password=os.getenv("PASSWORD"),
    )

@bot.message_handler(commands=['start'])
def send_welcome(message):

    welcome_text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç –ø—Ä–æ—î–∫—Ç—É <b>AbitHelp</b> üéì\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤—Å—ñ –≤–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ üì¢\n\n"
      "–¢—Ä–∏–º–∞–π —É—Å–µ –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ‚Äî –∂–æ–¥–Ω–∞ –ø–æ–¥—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ –ø–æ–≤–∑ —Ç–µ–±–µ! üîç‚ú®\n\n"
       "üëâ –ù–∞–ø–∏—à–∏ <b>/help</b>,–∞–±–æ –æ–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ üìã\n"
    )
    main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_menu.row("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
    main_menu.row("–ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏", "–î–æ–ø–æ–º–æ–≥–∞")
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu, parse_mode="HTML")


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "<b> –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
        "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞\n"
        "/follow ‚Äî –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å\n"
        "/unfollow ‚Äî –≤—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ —Ä–µ—Å—É—Ä—Å—É\n"
        "/myfollows ‚Äî —Ç–≤–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="HTML")


@bot.message_handler(commands=['follow'])
def follow(message):
    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id, name FROM events_resource")
            resources = cursor.fetchall()

    if not resources:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    res_id, name = resources[0]
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_0"),
        types.InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", callback_data=f"follow_{res_id}"),
        types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_0")
    )
    markup.add(types.InlineKeyboardButton("üîç –ü–æ—à—É–∫", switch_inline_query_current_chat=""))

    bot.send_message(message.chat.id, f"üîΩ –ü–æ–¥—ñ—è: {name}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('next_', 'prev_')))
def navigate_resources(call):
    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id, name FROM events_resource")
            resources = cursor.fetchall()

    total = len(resources)
    current = int(call.data.split('_')[1])
    new_index = (current + 1) % total if call.data.startswith('next_') else (current - 1) % total
    res_id, name = resources[new_index]
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_{new_index}"),
        types.InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", callback_data=f"follow_{res_id}"),
        types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_{new_index}")
    )
    markup.add(types.InlineKeyboardButton("üîç –ü–æ—à—É–∫", switch_inline_query_current_chat=""))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üîΩ –ü–æ–¥—ñ—è: {name}",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('follow_'))
def handle_follow(call):
    resource_id = int(call.data.split('_')[1])
    user_id = call.from_user.id
    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT 1 FROM telegram_subscribe WHERE user_id = %s AND resource_id = %s",
                           (user_id, resource_id))
            already_followed = cursor.fetchone()

            if already_followed:
                bot.answer_callback_query(call.id, "–¢–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ü–µ–π —Ä–µ—Å—É—Ä—Å.")
                return

            cursor.execute("INSERT INTO telegram_subscribe (user_id, resource_id) VALUES (%s, %s)",
                           (user_id, resource_id))

            cursor.execute("SELECT name FROM events_resource WHERE id = %s", (resource_id,))
            resource_name_row = cursor.fetchone()
            resource_name = resource_name_row[0] if resource_name_row else "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ—Å—É—Ä—Å"

    bot.answer_callback_query(call.id, "–ü—ñ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
    bot.send_message(call.message.chat.id, "<b>–¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ —Ä–µ—Å—É—Ä—Å!</b>", parse_mode="HTML")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üõ† –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä", callback_data=f"setfilter_{resource_id}"))

    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–µ—Å—É—Ä—Å <b>{resource_name}</b>.\n\n"
        "üìå –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –Ω–æ–≤–∏–Ω —Ü—å–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É:\n"
        "‚Äî –≤–∏–∫–ª—é—á–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ —ñ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–∏—Ö —Å–ª—ñ–≤;\n"
        "‚Äî –∑–∞–ª–∏—à–∏—Ç–∏ –ª–∏—à–µ –Ω–æ–≤–∏–Ω–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –∑—ñ —Å–ø–∏—Å–∫—É.\n\n"
        f"‚úçÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞.",
        parse_mode="HTML",
        reply_markup=markup
    )
@bot.message_handler(commands=['unfollow'])
def unfollow(message):
    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT r.id, r.name FROM events_resource r
                JOIN telegram_subscribe ts ON ts.resource_id = r.id
                WHERE ts.user_id = %s
            """, (message.from_user.id,))
            resources = cursor.fetchall()

    if not resources:
        bot.send_message(message.chat.id, "–¢–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∂–æ–¥–µ–Ω —Ä–µ—Å—É—Ä—Å.")
        return

    markup = types.InlineKeyboardMarkup()
    for res_id, name in resources:
        markup.add(types.InlineKeyboardButton(name, callback_data=f"unfollow_{res_id}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('unfollow_'))
def handle_unfollow(call):
    res_id = int(call.data.split('_')[1])
    user_id = call.from_user.id
    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM telegram_subscribe WHERE user_id = %s AND resource_id = %s", (user_id, res_id))
            bot.answer_callback_query(call.id, " –í—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
            bot.send_message(call.message.chat.id, "<b>–¢–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ —Ä–µ—Å—É—Ä—Å!</b>", parse_mode="HTML")

@bot.message_handler(commands=['myfollows'])
def myfollows(message):
    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT r.name FROM events_resource r
                JOIN telegram_subscribe ts ON ts.resource_id = r.id
                WHERE ts.user_id = %s
            """, (message.from_user.id,))
            resources = cursor.fetchall()

    if resources:
        text = "<b> –¢–≤–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏:</b>\n" + "\n".join(f"üîπ {r[0]}" for r in resources)
    else:
        text = "<b>Ô∏è –¢–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∂–æ–¥–µ–Ω —Ä–µ—Å—É—Ä—Å.</b>"
    bot.send_message(message.chat.id, text, parse_mode="HTML")


@bot.inline_handler(func=lambda query: len(query.query) > 0)
def inline_search(query):
    text = query.query.strip().lower()
    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT id, name FROM events_resource
                WHERE LOWER(name) LIKE %s
                LIMIT 10
            """, (f"%{text}%",))
            results = cursor.fetchall()

    articles = []
    for res_id, name in results:
        articles.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title=name,
                description="–ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
                input_message_content=InputTextMessageContent(
                    message_text=f"/subscribe_{res_id}"
                )
            )
        )

    if not articles:
        articles.append(
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                input_message_content=InputTextMessageContent(
                    message_text="–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º."
                )
            )
        )

    bot.answer_inline_query(query.id, articles, cache_time=1)


@bot.message_handler(regexp=r'^/subscribe_\d+$')
def subscribe_from_inline(message):
    resource_id = int(message.text.split("_")[1])
    user_id = message.from_user.id
    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                INSERT INTO telegram_subscribe (user_id, resource_id)
                VALUES (%s, %s) ON CONFLICT DO NOTHING
            """, (user_id, resource_id))
    bot.send_message(message.chat.id, "‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–µ—Å—É—Ä—Å!")




user_filter_states = {}

@bot.callback_query_handler(func=lambda c: c.data.startswith("setfilter_"))
def start_filter_setup(call):
    resource_id = int(call.data.split("_")[1])
    user_id = call.from_user.id
    user_filter_states[user_id] = {
        "resource_id": resource_id,
        "filter_include": None,
        "filter_except": None,
    }

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_include"))

    bot.send_message(user_id, "–í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ –¥–ª—è –í–ö–õ–Æ–ß–ï–ù–ù–Ø —É —Ñ—ñ–ª—å—Ç—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.\n–ê–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.", reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "skip_include")
def skip_include_handler(call):
    user_id = call.from_user.id
    if user_id in user_filter_states:
        user_filter_states[user_id]["filter_include"] = []
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_except"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ –¥–ª—è –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø —É —Ñ—ñ–ª—å—Ç—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.\n–ê–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.", reply_markup=markup)
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: m.from_user.id in user_filter_states and user_filter_states[m.from_user.id]["filter_include"] is None)
def receive_include_words(message):
    user_id = message.from_user.id
    words = message.text.strip()
    if words.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_filter_states[user_id]["filter_include"] = []
    else:
        user_filter_states[user_id]["filter_include"] = words.split()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_except"))
    bot.send_message(user_id, "–í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ –¥–ª—è –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø —É —Ñ—ñ–ª—å—Ç—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª.\n–ê–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data == "skip_except")
def skip_except_handler(call):
    user_id = call.from_user.id
    if user_id in user_filter_states:
        user_filter_states[user_id]["filter_except"] = []
        save_filters(user_id)
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: m.from_user.id in user_filter_states and user_filter_states[m.from_user.id]["filter_include"] is not None and user_filter_states[m.from_user.id]["filter_except"] is None)
def receive_except_words(message):
    user_id = message.from_user.id
    words = message.text.strip()
    if words.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_filter_states[user_id]["filter_except"] = []
    else:
        user_filter_states[user_id]["filter_except"] = words.split()

    save_filters(user_id)

def save_filters(user_id):
    state = user_filter_states[user_id]
    resource_id = state["resource_id"]
    filter_include = state["filter_include"]
    filter_except = state["filter_except"]

    with get_conn() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE telegram_subscribe
                SET filter_include = %s, filter_except = %s
                WHERE user_id = %s AND resource_id = %s
            """, (filter_include, filter_except, user_id, resource_id))
        conn.commit()

    bot.send_message(
        user_id,
        f"–§—ñ–ª—å—Ç—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ\n\n–í–∫–ª—é—á–µ–Ω—ñ —Å–ª–æ–≤–∞: {', '.join(filter_include) if filter_include else '–Ω–µ–º–∞—î'}\n"
        f"–í–∏–∫–ª—é—á–µ–Ω—ñ —Å–ª–æ–≤–∞: {', '.join(filter_except) if filter_except else '–Ω–µ–º–∞—î'}"
    )

    user_filter_states.pop(user_id)
@bot.message_handler(func=lambda message: message.text == "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
def handle_follow_text(message):
    follow(message)

@bot.message_handler(func=lambda message: message.text == "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
def handle_unfollow_text(message):
    unfollow(message)

@bot.message_handler(func=lambda message: message.text == "–ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏")
def handle_myfollows_text(message):
    myfollows(message)

@bot.message_handler(func=lambda message: message.text == "–î–æ–ø–æ–º–æ–≥–∞")
def handle_help_text(message):
    send_help(message)


def send_event_to_subscribers(event_id):
    with get_conn() as conn:
        with conn.cursor() as cursor:

            cursor.execute("""
                SELECT title, content, source_id, date, post_link FROM events_event WHERE id = %s
            """, (event_id,))
            event = cursor.fetchone()

            if not event:
                print(f"–ü–æ–¥—ñ—è –∑ ID {event_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                return

            title, content, source_id, date, post_link = event

            cursor.execute("""
                SELECT image FROM events_eventimage WHERE event_id = %s
            """, (event_id,))
            images = cursor.fetchall()

            images_data = []
            for img in images:
                url = f'http://localhost:8000/media/{img[0].lstrip("/")}'
                response = requests.get(url)
                if response.status_code == 200 and response.headers.get('Content-Type', '').startswith('image/'):
                    images_data.append(response)
                else:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ URL: {url}")

            cursor.execute("""
                SELECT user_id FROM telegram_subscribe WHERE resource_id = %s
            """, (source_id,))
            subscribers = cursor.fetchall()

    if not subscribers:
        print(f"‚ÑπÔ∏è –ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–µ—Å—É—Ä—Å—É {source_id}.")
        return

    event_text = (
        f"<b>{title}</b>\n\n"
        f"–û–ø–∏—Å:\n{content}\n\n"
        f"–î–∞—Ç–∞: <i>{date.strftime('%d.%m.%Y %H:%M')}</i>"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîó –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏", url=post_link))

    for (user_id,) in subscribers:
        try:
            bot.send_message(
                user_id,
                event_text,
                parse_mode="HTML",
                reply_markup=markup
            )

            for img_response in images_data:
                photo_bytes = BytesIO(img_response.content)
                photo_bytes.name = "photo.jpg"
                photo_bytes.seek(0)
                photo = InputFile(photo_bytes, file_name="photo.jpg")
                bot.send_photo(user_id, photo)

        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

def listen():
    def inner():
        conn = get_conn()
        conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        try:
            cursor.execute("LISTEN events_channel;")
            print("–°–ª—É—Ö–∞—î–º–æ events_channel...")

            while True:
                if select.select([conn], [], [], 5) == ([], [], []):
                    continue
                conn.poll()
                while conn.notifies:
                    notify = conn.notifies.pop(0)
                    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ NOTIFY –∑ payload: {notify.payload}")
                    try:
                        event_id = int(notify.payload)
                        send_event_to_subscribers(event_id)
                    except ValueError:
                        print("–ù–µ–≤—ñ—Ä–Ω–∏–π payload.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —É —Å–ª—É—Ö–∞—á—ñ: {e}")
        finally:
            cursor.close()
            conn.close()
    thread = threading.Thread(target=inner, daemon=True)
    thread.start()

listen()

bot.infinity_polling()