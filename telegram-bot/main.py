import telebot
import psycopg2
from telebot import types
import time
import threading
from dotenv import load_dotenv
import os

load_dotenv()



token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(token)

conn = psycopg2.connect(
    host=os.getenv("HOST"),
    dbname=os.getenv("DB_NAME"),
    user=os.getenv("DB_USER"),
    port=os.getenv("PORT"),
    password=os.getenv("PASSWORD"),
)
conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
cursor = conn.cursor()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
         "<b>üéì –í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É –±–æ—Ç—ñ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å—å–∫–∏—Ö –ø–æ–¥—ñ–π!</b>\n\n"
        "–¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à:\n"
        "üì¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
        "üéâ –î—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è –ø—Ä–æ –∑–∞—Ö–æ–¥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n"
        "üìö –°–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ –Ω–æ–≤–∏–Ω–∞–º–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤\n\n"
        "–û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:"
    )
    main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_menu.row(" –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", " –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
    main_menu.row(" –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu, parse_mode="HTML")


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "<b>‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n\n"
        "üîÑ /start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
        "‚ùì /help ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É\n"
        "‚ûï /follow ‚Äî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–µ—Å—É—Ä—Å\n"
        "‚ûñ /unfollow ‚Äî –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ —Ä–µ—Å—É—Ä—Å—É\n"
        "üìã /myfollows ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="HTML")


@bot.message_handler(commands=['follow'])
def follow(message):
    cursor.execute("SELECT id, name FROM events_resource")
    resources = cursor.fetchall()
    if not resources:
        bot.send_message(message.chat.id, "üòî –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏.")
        return

    res_id, name = resources[0]
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_0"),
        types.InlineKeyboardButton("‚úÖ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f"follow_{res_id}"),
        types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_0")
    )
    bot.send_message(message.chat.id, f"üéì <b>–†–µ—Å—É—Ä—Å:</b> {name}", reply_markup=markup, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data.startswith(('next_', 'prev_')))
def navigate_resources(call):
    cursor.execute("SELECT id, name FROM events_resource")
    resources = cursor.fetchall()
    total = len(resources)
    current = int(call.data.split('_')[1])
    new_index = (current + 1) % total if call.data.startswith('next_') else (current - 1) % total
    res_id, name = resources[new_index]
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_{new_index}"),
        types.InlineKeyboardButton("‚úÖ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f"follow_{res_id}"),
        types.InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_{new_index}")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üéì–†–µ—Å—É—Ä—Å: {name}",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('follow_'))
def handle_follow(call):
    resource_id = int(call.data.split('_')[1])
    user_id = call.from_user.id

    cursor.execute("SELECT 1 FROM telegram_subscribe WHERE user_id = %s AND resource_id = %s", (user_id, resource_id))
    already_followed = cursor.fetchone()

    if already_followed:
        bot.answer_callback_query(call.id, " –¢–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ü–µ–π —Ä–µ—Å—É—Ä—Å")
        return

    cursor.execute("INSERT INTO telegram_subscribe (user_id, resource_id) VALUES (%s, %s)", (user_id, resource_id))
    conn.commit()

    bot.answer_callback_query(call.id, " –ü—ñ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
    bot.send_message(call.message.chat.id, "<b> –¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ —Ä–µ—Å—É—Ä—Å</b>", parse_mode="HTML")


@bot.message_handler(commands=['unfollow'])
def unfollow(message):
    cursor.execute("""
        SELECT r.id, r.name FROM events_resource r
        JOIN telegram_subscribe ts ON ts.resource_id = r.id
        WHERE ts.user_id = %s
    """, (message.from_user.id,))
    resources = cursor.fetchall()

    if not resources:
        bot.send_message(message.chat.id, "–¢–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∂–æ–¥–µ–Ω —Ä–µ—Å—É—Ä—Å")
        return

    markup = types.InlineKeyboardMarkup()
    for res_id, name in resources:
        markup.add(types.InlineKeyboardButton(name, callback_data=f"unfollow_{res_id}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ —Ä–µ—Å—É—Ä—Å –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('unfollow_'))
def handle_unfollow(call):
    res_id = int(call.data.split('_')[1])
    user_id = call.from_user.id
    cursor.execute("DELETE FROM telegram_subscribe WHERE user_id = %s AND resource_id = %s", (user_id, res_id))
    conn.commit()

    bot.answer_callback_query(call.id, " –í—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
    bot.send_message(call.message.chat.id, "<b>–¢–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ —Ä–µ—Å—É—Ä—Å—É</b>", parse_mode="HTML")

@bot.message_handler(commands=['myfollows'])
def myfollows(message):
    cursor.execute("""
        SELECT r.name FROM events_resource r
        JOIN telegram_subscribe ts ON ts.resource_id = r.id
        WHERE ts.user_id = %s
    """, (message.from_user.id,))
    resources = cursor.fetchall()

    if resources:
        text = "<b> –¢–≤–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏:</b>\n" + "\n".join(f"üîπ {r[0]}" for r in resources)
    else:
        text = "<b>Ô∏è –¢–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∂–æ–¥–µ–Ω —Ä–µ—Å—É—Ä—Å.</b>"
    bot.send_message(message.chat.id, text, parse_mode="HTML")


def send_event(event_id):
    cursor.execute("SELECT title, content, source_id, date, post_link FROM events_event WHERE id = %s", (event_id,))
    event = cursor.fetchone()

    if not event:
        print(f" –ü–æ–¥—ñ—è –∑ ID {event_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    title, content, source_id, date, post_link = event

    event_text = (
        f"üéì <b>{title}</b>\n\n"
        f"üìù <b>–û–ø–∏—Å:</b>\n{content}\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> <i>{date.strftime('%d.%m.%Y %H:%M')}</i>"
    )

    cursor.execute("SELECT user_id FROM telegram_subscribe WHERE resource_id = %s", (source_id,))
    subscribers = cursor.fetchall()

    if not subscribers:
        print(f"‚Ñπ –ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–µ—Å—É—Ä—Å—É {source_id}.")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(" –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ", url=post_link))

    for subscriber in subscribers:
        user_id = subscriber[0]
        try:
            bot.send_message(user_id, event_text, parse_mode="HTML", reply_markup=markup)
        except Exception as e:
            print(f" –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")


def listen():
    cursor.execute("LISTEN events_channel;")
    print("—Å–ª—É—Ö–∞—î –∫–∞–Ω–∞–ª 'events_channel'...")
    while True:
        conn.poll()
        while conn.notifies:
            notify = conn.notifies.pop(0)
            print(f"–ü—Ä–∏–π—à–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {notify.payload}")
            try:
                event_id = int(notify.payload)
                send_event(event_id)
            except ValueError:
                print(" –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∏–π payload –≤ NOTIFY.")
        time.sleep(5)

listener_thread = threading.Thread(target=listen, daemon=True)
listener_thread.start()

@bot.message_handler(func=lambda message: message.text == "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
def handle_follow_text(message):
    follow(message)

@bot.message_handler(func=lambda message: message.text == "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è")
def handle_unfollow_text(message):
    unfollow(message)

@bot.message_handler(func=lambda message: message.text == "–ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏")
def handle_myfollows_text(message):
    myfollows(message)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
def handle_help_text(message):
    send_help(message)

bot.infinity_polling()